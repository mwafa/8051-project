                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module soal1a
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _CY
                                     13 	.globl _AC
                                     14 	.globl _F0
                                     15 	.globl _RS1
                                     16 	.globl _RS0
                                     17 	.globl _OV
                                     18 	.globl _F1
                                     19 	.globl _P
                                     20 	.globl _PS
                                     21 	.globl _PT1
                                     22 	.globl _PX1
                                     23 	.globl _PT0
                                     24 	.globl _PX0
                                     25 	.globl _RD
                                     26 	.globl _WR
                                     27 	.globl _T1
                                     28 	.globl _T0
                                     29 	.globl _INT1
                                     30 	.globl _INT0
                                     31 	.globl _TXD
                                     32 	.globl _RXD
                                     33 	.globl _P3_7
                                     34 	.globl _P3_6
                                     35 	.globl _P3_5
                                     36 	.globl _P3_4
                                     37 	.globl _P3_3
                                     38 	.globl _P3_2
                                     39 	.globl _P3_1
                                     40 	.globl _P3_0
                                     41 	.globl _EA
                                     42 	.globl _ES
                                     43 	.globl _ET1
                                     44 	.globl _EX1
                                     45 	.globl _ET0
                                     46 	.globl _EX0
                                     47 	.globl _P2_7
                                     48 	.globl _P2_6
                                     49 	.globl _P2_5
                                     50 	.globl _P2_4
                                     51 	.globl _P2_3
                                     52 	.globl _P2_2
                                     53 	.globl _P2_1
                                     54 	.globl _P2_0
                                     55 	.globl _SM0
                                     56 	.globl _SM1
                                     57 	.globl _SM2
                                     58 	.globl _REN
                                     59 	.globl _TB8
                                     60 	.globl _RB8
                                     61 	.globl _TI
                                     62 	.globl _RI
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _TF1
                                     72 	.globl _TR1
                                     73 	.globl _TF0
                                     74 	.globl _TR0
                                     75 	.globl _IE1
                                     76 	.globl _IT1
                                     77 	.globl _IE0
                                     78 	.globl _IT0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _B
                                     88 	.globl _ACC
                                     89 	.globl _PSW
                                     90 	.globl _IP
                                     91 	.globl _P3
                                     92 	.globl _IE
                                     93 	.globl _P2
                                     94 	.globl _SBUF
                                     95 	.globl _SCON
                                     96 	.globl _P1
                                     97 	.globl _TH1
                                     98 	.globl _TH0
                                     99 	.globl _TL1
                                    100 	.globl _TL0
                                    101 	.globl _TMOD
                                    102 	.globl _TCON
                                    103 	.globl _PCON
                                    104 	.globl _DPH
                                    105 	.globl _DPL
                                    106 	.globl _SP
                                    107 	.globl _P0
                                    108 ;--------------------------------------------------------
                                    109 ; special function registers
                                    110 ;--------------------------------------------------------
                                    111 	.area RSEG    (ABS,DATA)
      000000                        112 	.org 0x0000
                           000080   113 _P0	=	0x0080
                           000081   114 _SP	=	0x0081
                           000082   115 _DPL	=	0x0082
                           000083   116 _DPH	=	0x0083
                           000087   117 _PCON	=	0x0087
                           000088   118 _TCON	=	0x0088
                           000089   119 _TMOD	=	0x0089
                           00008A   120 _TL0	=	0x008a
                           00008B   121 _TL1	=	0x008b
                           00008C   122 _TH0	=	0x008c
                           00008D   123 _TH1	=	0x008d
                           000090   124 _P1	=	0x0090
                           000098   125 _SCON	=	0x0098
                           000099   126 _SBUF	=	0x0099
                           0000A0   127 _P2	=	0x00a0
                           0000A8   128 _IE	=	0x00a8
                           0000B0   129 _P3	=	0x00b0
                           0000B8   130 _IP	=	0x00b8
                           0000D0   131 _PSW	=	0x00d0
                           0000E0   132 _ACC	=	0x00e0
                           0000F0   133 _B	=	0x00f0
                                    134 ;--------------------------------------------------------
                                    135 ; special function bits
                                    136 ;--------------------------------------------------------
                                    137 	.area RSEG    (ABS,DATA)
      000000                        138 	.org 0x0000
                           000080   139 _P0_0	=	0x0080
                           000081   140 _P0_1	=	0x0081
                           000082   141 _P0_2	=	0x0082
                           000083   142 _P0_3	=	0x0083
                           000084   143 _P0_4	=	0x0084
                           000085   144 _P0_5	=	0x0085
                           000086   145 _P0_6	=	0x0086
                           000087   146 _P0_7	=	0x0087
                           000088   147 _IT0	=	0x0088
                           000089   148 _IE0	=	0x0089
                           00008A   149 _IT1	=	0x008a
                           00008B   150 _IE1	=	0x008b
                           00008C   151 _TR0	=	0x008c
                           00008D   152 _TF0	=	0x008d
                           00008E   153 _TR1	=	0x008e
                           00008F   154 _TF1	=	0x008f
                           000090   155 _P1_0	=	0x0090
                           000091   156 _P1_1	=	0x0091
                           000092   157 _P1_2	=	0x0092
                           000093   158 _P1_3	=	0x0093
                           000094   159 _P1_4	=	0x0094
                           000095   160 _P1_5	=	0x0095
                           000096   161 _P1_6	=	0x0096
                           000097   162 _P1_7	=	0x0097
                           000098   163 _RI	=	0x0098
                           000099   164 _TI	=	0x0099
                           00009A   165 _RB8	=	0x009a
                           00009B   166 _TB8	=	0x009b
                           00009C   167 _REN	=	0x009c
                           00009D   168 _SM2	=	0x009d
                           00009E   169 _SM1	=	0x009e
                           00009F   170 _SM0	=	0x009f
                           0000A0   171 _P2_0	=	0x00a0
                           0000A1   172 _P2_1	=	0x00a1
                           0000A2   173 _P2_2	=	0x00a2
                           0000A3   174 _P2_3	=	0x00a3
                           0000A4   175 _P2_4	=	0x00a4
                           0000A5   176 _P2_5	=	0x00a5
                           0000A6   177 _P2_6	=	0x00a6
                           0000A7   178 _P2_7	=	0x00a7
                           0000A8   179 _EX0	=	0x00a8
                           0000A9   180 _ET0	=	0x00a9
                           0000AA   181 _EX1	=	0x00aa
                           0000AB   182 _ET1	=	0x00ab
                           0000AC   183 _ES	=	0x00ac
                           0000AF   184 _EA	=	0x00af
                           0000B0   185 _P3_0	=	0x00b0
                           0000B1   186 _P3_1	=	0x00b1
                           0000B2   187 _P3_2	=	0x00b2
                           0000B3   188 _P3_3	=	0x00b3
                           0000B4   189 _P3_4	=	0x00b4
                           0000B5   190 _P3_5	=	0x00b5
                           0000B6   191 _P3_6	=	0x00b6
                           0000B7   192 _P3_7	=	0x00b7
                           0000B0   193 _RXD	=	0x00b0
                           0000B1   194 _TXD	=	0x00b1
                           0000B2   195 _INT0	=	0x00b2
                           0000B3   196 _INT1	=	0x00b3
                           0000B4   197 _T0	=	0x00b4
                           0000B5   198 _T1	=	0x00b5
                           0000B6   199 _WR	=	0x00b6
                           0000B7   200 _RD	=	0x00b7
                           0000B8   201 _PX0	=	0x00b8
                           0000B9   202 _PT0	=	0x00b9
                           0000BA   203 _PX1	=	0x00ba
                           0000BB   204 _PT1	=	0x00bb
                           0000BC   205 _PS	=	0x00bc
                           0000D0   206 _P	=	0x00d0
                           0000D1   207 _F1	=	0x00d1
                           0000D2   208 _OV	=	0x00d2
                           0000D3   209 _RS0	=	0x00d3
                           0000D4   210 _RS1	=	0x00d4
                           0000D5   211 _F0	=	0x00d5
                           0000D6   212 _AC	=	0x00d6
                           0000D7   213 _CY	=	0x00d7
                                    214 ;--------------------------------------------------------
                                    215 ; overlayable register banks
                                    216 ;--------------------------------------------------------
                                    217 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        218 	.ds 8
                                    219 ;--------------------------------------------------------
                                    220 ; internal ram data
                                    221 ;--------------------------------------------------------
                                    222 	.area DSEG    (DATA)
                                    223 ;--------------------------------------------------------
                                    224 ; overlayable items in internal ram 
                                    225 ;--------------------------------------------------------
                                    226 	.area	OSEG    (OVR,DATA)
      000008                        227 _main_a_1_2:
      000008                        228 	.ds 10
                                    229 ;--------------------------------------------------------
                                    230 ; Stack segment in internal ram 
                                    231 ;--------------------------------------------------------
                                    232 	.area	SSEG
      000012                        233 __start__stack:
      000012                        234 	.ds	1
                                    235 
                                    236 ;--------------------------------------------------------
                                    237 ; indirectly addressable internal ram data
                                    238 ;--------------------------------------------------------
                                    239 	.area ISEG    (DATA)
                                    240 ;--------------------------------------------------------
                                    241 ; absolute internal ram data
                                    242 ;--------------------------------------------------------
                                    243 	.area IABS    (ABS,DATA)
                                    244 	.area IABS    (ABS,DATA)
                                    245 ;--------------------------------------------------------
                                    246 ; bit data
                                    247 ;--------------------------------------------------------
                                    248 	.area BSEG    (BIT)
                                    249 ;--------------------------------------------------------
                                    250 ; paged external ram data
                                    251 ;--------------------------------------------------------
                                    252 	.area PSEG    (PAG,XDATA)
                                    253 ;--------------------------------------------------------
                                    254 ; external ram data
                                    255 ;--------------------------------------------------------
                                    256 	.area XSEG    (XDATA)
                                    257 ;--------------------------------------------------------
                                    258 ; absolute external ram data
                                    259 ;--------------------------------------------------------
                                    260 	.area XABS    (ABS,XDATA)
                                    261 ;--------------------------------------------------------
                                    262 ; external initialized ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area XISEG   (XDATA)
                                    265 	.area HOME    (CODE)
                                    266 	.area GSINIT0 (CODE)
                                    267 	.area GSINIT1 (CODE)
                                    268 	.area GSINIT2 (CODE)
                                    269 	.area GSINIT3 (CODE)
                                    270 	.area GSINIT4 (CODE)
                                    271 	.area GSINIT5 (CODE)
                                    272 	.area GSINIT  (CODE)
                                    273 	.area GSFINAL (CODE)
                                    274 	.area CSEG    (CODE)
                                    275 ;--------------------------------------------------------
                                    276 ; interrupt vector 
                                    277 ;--------------------------------------------------------
                                    278 	.area HOME    (CODE)
      000000                        279 __interrupt_vect:
      000000 02 00 06         [24]  280 	ljmp	__sdcc_gsinit_startup
                                    281 ;--------------------------------------------------------
                                    282 ; global & static initialisations
                                    283 ;--------------------------------------------------------
                                    284 	.area HOME    (CODE)
                                    285 	.area GSINIT  (CODE)
                                    286 	.area GSFINAL (CODE)
                                    287 	.area GSINIT  (CODE)
                                    288 	.globl __sdcc_gsinit_startup
                                    289 	.globl __sdcc_program_startup
                                    290 	.globl __start__stack
                                    291 	.globl __mcs51_genXINIT
                                    292 	.globl __mcs51_genXRAMCLEAR
                                    293 	.globl __mcs51_genRAMCLEAR
                                    294 	.area GSFINAL (CODE)
      00005F 02 00 03         [24]  295 	ljmp	__sdcc_program_startup
                                    296 ;--------------------------------------------------------
                                    297 ; Home
                                    298 ;--------------------------------------------------------
                                    299 	.area HOME    (CODE)
                                    300 	.area HOME    (CODE)
      000003                        301 __sdcc_program_startup:
      000003 02 00 62         [24]  302 	ljmp	_main
                                    303 ;	return from main will return to caller
                                    304 ;--------------------------------------------------------
                                    305 ; code
                                    306 ;--------------------------------------------------------
                                    307 	.area CSEG    (CODE)
                                    308 ;------------------------------------------------------------
                                    309 ;Allocation info for local variables in function 'main'
                                    310 ;------------------------------------------------------------
                                    311 ;t                         Allocated to registers 
                                    312 ;x                         Allocated to registers r2 
                                    313 ;i                         Allocated to registers r3 
                                    314 ;j                         Allocated to registers r5 
                                    315 ;k                         Allocated to registers r6 
                                    316 ;l                         Allocated to registers r7 
                                    317 ;a                         Allocated with name '_main_a_1_2'
                                    318 ;------------------------------------------------------------
                                    319 ;	soal1a.c:10: void main(void) {
                                    320 ;	-----------------------------------------
                                    321 ;	 function main
                                    322 ;	-----------------------------------------
      000062                        323 _main:
                           000007   324 	ar7 = 0x07
                           000006   325 	ar6 = 0x06
                           000005   326 	ar5 = 0x05
                           000004   327 	ar4 = 0x04
                           000003   328 	ar3 = 0x03
                           000002   329 	ar2 = 0x02
                           000001   330 	ar1 = 0x01
                           000000   331 	ar0 = 0x00
                                    332 ;	soal1a.c:11: unsigned char t=250,x,i,j,k,l,a[10]={0x0C0,0x0F9,0x0A4,0x0B0,0x99,0x92,0x082,0x0F8,0x80,0x90};
      000062 75 08 C0         [24]  333 	mov	_main_a_1_2,#0xc0
      000065 75 09 F9         [24]  334 	mov	(_main_a_1_2 + 0x0001),#0xf9
      000068 75 0A A4         [24]  335 	mov	(_main_a_1_2 + 0x0002),#0xa4
      00006B 75 0B B0         [24]  336 	mov	(_main_a_1_2 + 0x0003),#0xb0
      00006E 75 0C 99         [24]  337 	mov	(_main_a_1_2 + 0x0004),#0x99
      000071 75 0D 92         [24]  338 	mov	(_main_a_1_2 + 0x0005),#0x92
      000074 75 0E 82         [24]  339 	mov	(_main_a_1_2 + 0x0006),#0x82
      000077 75 0F F8         [24]  340 	mov	(_main_a_1_2 + 0x0007),#0xf8
      00007A 75 10 80         [24]  341 	mov	(_main_a_1_2 + 0x0008),#0x80
      00007D 75 11 90         [24]  342 	mov	(_main_a_1_2 + 0x0009),#0x90
                                    343 ;	soal1a.c:12: P0_7 = 1;
      000080 D2 87            [12]  344 	setb	_P0_7
                                    345 ;	soal1a.c:14: for ( l = 0; l < 4; l++) {
      000082                        346 00191$:
      000082 7F 00            [12]  347 	mov	r7,#0x00
      000084                        348 00159$:
                                    349 ;	soal1a.c:15: if (l<2) {
      000084 BF 02 00         [24]  350 	cjne	r7,#0x02,00271$
      000087                        351 00271$:
      000087 40 03            [24]  352 	jc	00272$
      000089 02 01 00         [24]  353 	ljmp	00109$
      00008C                        354 00272$:
                                    355 ;	soal1a.c:16: for ( k = 0; k < 10; k++) {
      00008C EF               [12]  356 	mov	a,r7
      00008D 24 08            [12]  357 	add	a,#_main_a_1_2
      00008F F9               [12]  358 	mov	r1,a
      000090 7E 00            [12]  359 	mov	r6,#0x00
                                    360 ;	soal1a.c:17: for (j = 0; j < 6; j++) {
      000092                        361 00174$:
      000092 EE               [12]  362 	mov	a,r6
      000093 24 08            [12]  363 	add	a,#_main_a_1_2
      000095 F8               [12]  364 	mov	r0,a
      000096 7D 00            [12]  365 	mov	r5,#0x00
                                    366 ;	soal1a.c:18: for (i = 0; i < 10; i++) {
      000098                        367 00172$:
      000098 ED               [12]  368 	mov	a,r5
      000099 24 08            [12]  369 	add	a,#_main_a_1_2
      00009B FC               [12]  370 	mov	r4,a
      00009C 7B 00            [12]  371 	mov	r3,#0x00
      00009E                        372 00135$:
                                    373 ;	soal1a.c:19: A1 = 0;  A0 = 0; /*SS0=satuan menit*/
      00009E C2 B4            [12]  374 	clr	_P3_4
      0000A0 C2 B3            [12]  375 	clr	_P3_3
                                    376 ;	soal1a.c:20: SS=a[i];
      0000A2 EB               [12]  377 	mov	a,r3
      0000A3 24 08            [12]  378 	add	a,#_main_a_1_2
      0000A5 FA               [12]  379 	mov	r2,a
      0000A6 C0 00            [24]  380 	push	ar0
      0000A8 A8 02            [24]  381 	mov	r0,ar2
      0000AA 86 90            [24]  382 	mov	_P1,@r0
      0000AC D0 00            [24]  383 	pop	ar0
                                    384 ;	soal1a.c:21: for (x = 0; x < t; x++){;}
      0000AE 7A 00            [12]  385 	mov	r2,#0x00
      0000B0                        386 00124$:
      0000B0 BA FA 00         [24]  387 	cjne	r2,#0xfa,00273$
      0000B3                        388 00273$:
      0000B3 50 03            [24]  389 	jnc	00101$
      0000B5 0A               [12]  390 	inc	r2
      0000B6 80 F8            [24]  391 	sjmp	00124$
      0000B8                        392 00101$:
                                    393 ;	soal1a.c:23: A1 = 0;  A0 = 1; /*SS1=puluhan menit*/
      0000B8 C2 B4            [12]  394 	clr	_P3_4
      0000BA D2 B3            [12]  395 	setb	_P3_3
                                    396 ;	soal1a.c:24: SS=a[j];
      0000BC C0 00            [24]  397 	push	ar0
      0000BE A8 04            [24]  398 	mov	r0,ar4
      0000C0 86 90            [24]  399 	mov	_P1,@r0
      0000C2 D0 00            [24]  400 	pop	ar0
                                    401 ;	soal1a.c:25: for (x = 0; x < t; x++){;}
      0000C4 7A 00            [12]  402 	mov	r2,#0x00
      0000C6                        403 00127$:
      0000C6 BA FA 00         [24]  404 	cjne	r2,#0xfa,00275$
      0000C9                        405 00275$:
      0000C9 50 03            [24]  406 	jnc	00102$
      0000CB 0A               [12]  407 	inc	r2
      0000CC 80 F8            [24]  408 	sjmp	00127$
      0000CE                        409 00102$:
                                    410 ;	soal1a.c:27: A1 = 1;  A0 = 0; /*SS2=satuan jam*/
      0000CE D2 B4            [12]  411 	setb	_P3_4
      0000D0 C2 B3            [12]  412 	clr	_P3_3
                                    413 ;	soal1a.c:28: SS=a[k];
      0000D2 86 90            [24]  414 	mov	_P1,@r0
                                    415 ;	soal1a.c:29: for (x = 0; x < t; x++){;}
      0000D4 7A 00            [12]  416 	mov	r2,#0x00
      0000D6                        417 00130$:
      0000D6 BA FA 00         [24]  418 	cjne	r2,#0xfa,00277$
      0000D9                        419 00277$:
      0000D9 50 03            [24]  420 	jnc	00103$
      0000DB 0A               [12]  421 	inc	r2
      0000DC 80 F8            [24]  422 	sjmp	00130$
      0000DE                        423 00103$:
                                    424 ;	soal1a.c:31: A1 = 1;  A0 = 1; /*SS2=puluhan jam*/
      0000DE D2 B4            [12]  425 	setb	_P3_4
      0000E0 D2 B3            [12]  426 	setb	_P3_3
                                    427 ;	soal1a.c:32: SS=a[l];
      0000E2 87 90            [24]  428 	mov	_P1,@r1
                                    429 ;	soal1a.c:33: for (x = 0; x < t; x++){;}
      0000E4 7A 00            [12]  430 	mov	r2,#0x00
      0000E6                        431 00133$:
      0000E6 BA FA 00         [24]  432 	cjne	r2,#0xfa,00279$
      0000E9                        433 00279$:
      0000E9 50 03            [24]  434 	jnc	00136$
      0000EB 0A               [12]  435 	inc	r2
      0000EC 80 F8            [24]  436 	sjmp	00133$
      0000EE                        437 00136$:
                                    438 ;	soal1a.c:18: for (i = 0; i < 10; i++) {
      0000EE 0B               [12]  439 	inc	r3
      0000EF BB 0A 00         [24]  440 	cjne	r3,#0x0a,00281$
      0000F2                        441 00281$:
      0000F2 40 AA            [24]  442 	jc	00135$
                                    443 ;	soal1a.c:17: for (j = 0; j < 6; j++) {
      0000F4 0D               [12]  444 	inc	r5
      0000F5 BD 06 00         [24]  445 	cjne	r5,#0x06,00283$
      0000F8                        446 00283$:
      0000F8 40 9E            [24]  447 	jc	00172$
                                    448 ;	soal1a.c:16: for ( k = 0; k < 10; k++) {
      0000FA 0E               [12]  449 	inc	r6
      0000FB BE 0A 00         [24]  450 	cjne	r6,#0x0a,00285$
      0000FE                        451 00285$:
      0000FE 40 92            [24]  452 	jc	00174$
      000100                        453 00109$:
                                    454 ;	soal1a.c:39: if (l==3) {
      000100 BF 03 02         [24]  455 	cjne	r7,#0x03,00287$
      000103 80 03            [24]  456 	sjmp	00288$
      000105                        457 00287$:
      000105 02 01 7C         [24]  458 	ljmp	00160$
      000108                        459 00288$:
                                    460 ;	soal1a.c:40: for ( k = 0; k < 4; k++) {
      000108 EF               [12]  461 	mov	a,r7
      000109 24 08            [12]  462 	add	a,#_main_a_1_2
      00010B F9               [12]  463 	mov	r1,a
      00010C 7E 00            [12]  464 	mov	r6,#0x00
                                    465 ;	soal1a.c:41: for (j = 0; j < 6; j++) {
      00010E                        466 00188$:
      00010E EE               [12]  467 	mov	a,r6
      00010F 24 08            [12]  468 	add	a,#_main_a_1_2
      000111 F8               [12]  469 	mov	r0,a
      000112 7D 00            [12]  470 	mov	r5,#0x00
                                    471 ;	soal1a.c:42: for (i = 0; i < 10; i++) {
      000114                        472 00186$:
      000114 ED               [12]  473 	mov	a,r5
      000115 24 08            [12]  474 	add	a,#_main_a_1_2
      000117 FC               [12]  475 	mov	r4,a
      000118 7B 00            [12]  476 	mov	r3,#0x00
      00011A                        477 00153$:
                                    478 ;	soal1a.c:43: A1 = 0;  A0 = 0; /*SS0=satuan menit*/
      00011A C2 B4            [12]  479 	clr	_P3_4
      00011C C2 B3            [12]  480 	clr	_P3_3
                                    481 ;	soal1a.c:44: SS=a[i];
      00011E EB               [12]  482 	mov	a,r3
      00011F 24 08            [12]  483 	add	a,#_main_a_1_2
      000121 FA               [12]  484 	mov	r2,a
      000122 C0 00            [24]  485 	push	ar0
      000124 A8 02            [24]  486 	mov	r0,ar2
      000126 86 90            [24]  487 	mov	_P1,@r0
      000128 D0 00            [24]  488 	pop	ar0
                                    489 ;	soal1a.c:45: for (x = 0; x < t; x++){;}
      00012A 7A 00            [12]  490 	mov	r2,#0x00
      00012C                        491 00142$:
      00012C BA FA 00         [24]  492 	cjne	r2,#0xfa,00289$
      00012F                        493 00289$:
      00012F 50 03            [24]  494 	jnc	00110$
      000131 0A               [12]  495 	inc	r2
      000132 80 F8            [24]  496 	sjmp	00142$
      000134                        497 00110$:
                                    498 ;	soal1a.c:47: A1 = 0;  A0 = 1; /*SS1=puluhan menit*/
      000134 C2 B4            [12]  499 	clr	_P3_4
      000136 D2 B3            [12]  500 	setb	_P3_3
                                    501 ;	soal1a.c:48: SS=a[j];
      000138 C0 00            [24]  502 	push	ar0
      00013A A8 04            [24]  503 	mov	r0,ar4
      00013C 86 90            [24]  504 	mov	_P1,@r0
      00013E D0 00            [24]  505 	pop	ar0
                                    506 ;	soal1a.c:49: for (x = 0; x < t; x++){;}
      000140 7A 00            [12]  507 	mov	r2,#0x00
      000142                        508 00145$:
      000142 BA FA 00         [24]  509 	cjne	r2,#0xfa,00291$
      000145                        510 00291$:
      000145 50 03            [24]  511 	jnc	00111$
      000147 0A               [12]  512 	inc	r2
      000148 80 F8            [24]  513 	sjmp	00145$
      00014A                        514 00111$:
                                    515 ;	soal1a.c:51: A1 = 1;  A0 = 0; /*SS2=satuan jam*/
      00014A D2 B4            [12]  516 	setb	_P3_4
      00014C C2 B3            [12]  517 	clr	_P3_3
                                    518 ;	soal1a.c:52: SS=a[k];
      00014E 86 90            [24]  519 	mov	_P1,@r0
                                    520 ;	soal1a.c:53: for (x = 0; x < t; x++){;}
      000150 7A 00            [12]  521 	mov	r2,#0x00
      000152                        522 00148$:
      000152 BA FA 00         [24]  523 	cjne	r2,#0xfa,00293$
      000155                        524 00293$:
      000155 50 03            [24]  525 	jnc	00112$
      000157 0A               [12]  526 	inc	r2
      000158 80 F8            [24]  527 	sjmp	00148$
      00015A                        528 00112$:
                                    529 ;	soal1a.c:55: A1 = 1;  A0 = 1; /*SS2=puluhan jam*/
      00015A D2 B4            [12]  530 	setb	_P3_4
      00015C D2 B3            [12]  531 	setb	_P3_3
                                    532 ;	soal1a.c:56: SS=a[l];
      00015E 87 90            [24]  533 	mov	_P1,@r1
                                    534 ;	soal1a.c:57: for (x = 0; x < t; x++){;}
      000160 7A 00            [12]  535 	mov	r2,#0x00
      000162                        536 00151$:
      000162 BA FA 00         [24]  537 	cjne	r2,#0xfa,00295$
      000165                        538 00295$:
      000165 50 03            [24]  539 	jnc	00154$
      000167 0A               [12]  540 	inc	r2
      000168 80 F8            [24]  541 	sjmp	00151$
      00016A                        542 00154$:
                                    543 ;	soal1a.c:42: for (i = 0; i < 10; i++) {
      00016A 0B               [12]  544 	inc	r3
      00016B BB 0A 00         [24]  545 	cjne	r3,#0x0a,00297$
      00016E                        546 00297$:
      00016E 40 AA            [24]  547 	jc	00153$
                                    548 ;	soal1a.c:41: for (j = 0; j < 6; j++) {
      000170 0D               [12]  549 	inc	r5
      000171 BD 06 00         [24]  550 	cjne	r5,#0x06,00299$
      000174                        551 00299$:
      000174 40 9E            [24]  552 	jc	00186$
                                    553 ;	soal1a.c:40: for ( k = 0; k < 4; k++) {
      000176 0E               [12]  554 	inc	r6
      000177 BE 04 00         [24]  555 	cjne	r6,#0x04,00301$
      00017A                        556 00301$:
      00017A 40 92            [24]  557 	jc	00188$
      00017C                        558 00160$:
                                    559 ;	soal1a.c:14: for ( l = 0; l < 4; l++) {
      00017C 0F               [12]  560 	inc	r7
      00017D BF 04 00         [24]  561 	cjne	r7,#0x04,00303$
      000180                        562 00303$:
      000180 50 03            [24]  563 	jnc	00304$
      000182 02 00 84         [24]  564 	ljmp	00159$
      000185                        565 00304$:
      000185 02 00 82         [24]  566 	ljmp	00191$
                                    567 	.area CSEG    (CODE)
                                    568 	.area CONST   (CODE)
                                    569 	.area XINIT   (CODE)
                                    570 	.area CABS    (ABS,CODE)
